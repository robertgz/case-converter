{"version":3,"sources":["CaseResult.js","SourceText.js","CaseConverter.js","App.js","serviceWorker.js","index.js"],"names":["CaseResult","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCopy","bind","assertThisInitialized","event","copyToCLipboard","result","text","navigator","clipboard","writeText","then","console","log","react_default","a","createElement","InputGroup","InputGroupAddon","addonType","Button","color","onClick","title","InputGroupText","className","case","Input","value","readOnly","Component","SourceText","handleChange","onHandleChange","target","placeholder","defaultText","onChange","sentenceCase","sentences","split","newSentences","forEach","element","loc","length","trimStart","slice","toUpperCase","toLowerCase","initialCapsCase","words","newWords","CaseConverter","state","inputText","handleConvert","setState","Fragment","src_SourceText","src_CaseResult","App","src_CaseConverter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"uTAwCeA,cApCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,WAAaP,EAAKO,WAAWC,KAAhBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAFDA,0EAKRU,GACTP,KAAKQ,gBAAgBR,KAAKJ,MAAMa,gDAGlBC,GACdC,UAAUC,UAAUC,UAAUH,GAAMI,KAAK,aAEtC,WAEDC,QAAQC,IAAI,gEAKd,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAiBC,UAAU,WAC3BL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAASzB,KAAKI,WACrCsB,MAAM,0BADP,QAIET,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAgBC,UAAU,sBACvB5B,KAAKJ,MAAMiC,OAGhBZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOC,MAAO/B,KAAKJ,MAAMa,OAAQuB,UAAQ,YA/BxBC,aCuBVC,cAtBb,SAAAA,EAAYtC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkC,IACjBrC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoC,GAAA/B,KAAAH,KAAMJ,KACDuC,aAAetC,EAAKsC,aAAa9B,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAFHA,4EAKNU,GACXP,KAAKJ,MAAMwC,eAAe7B,EAAM8B,OAAON,wCAIvC,OACEd,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACEC,MAAO/B,KAAKJ,MAAMmC,MAClBO,YAAatC,KAAKJ,MAAM2C,YACxBC,SAAUxC,KAAKmC,uBAhBAF,aC6CzB,SAASQ,EAAa/B,GACpB,IAAIgC,EAAYhC,EAAKiC,MAAM,YACvBC,EAAe,GAKnB,OAJAF,EAAUG,QAAQ,SAAAC,GAChB,IAAIC,EAAMD,EAAQE,OAASF,EAAQG,YAAYD,OAC9CJ,GAAgBE,EAAQI,MAAM,EAAGH,GAAOD,EAAQI,MAAMH,EAAKA,EAAI,GAAGI,cAAgBL,EAAQI,MAAMH,EAAI,GAAGK,gBAEnGR,EAGT,SAASS,EAAgB3C,GACvB,IAAI4C,EAAQ5C,EAAKiC,MAAM,YACnBY,EAAW,GAIf,OAHAD,EAAMT,QAAQ,SAAAC,GACZS,GAAYT,EAAQI,MAAM,EAAG,GAAGC,cAAgBL,EAAQI,MAAM,GAAGE,gBAE5DG,EAGMC,kBA9Db,SAAAA,EAAY5D,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwD,IACjB3D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0D,GAAArD,KAAAH,KAAMJ,KACD6D,MAAQ,CACXC,UAAW,IAGb7D,EAAK8D,cAAgB9D,EAAK8D,cAActD,KAAnBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KANJA,6EASLa,GACZV,KAAK4D,SAAS,CAACF,UAAWhD,qCAI1B,OACEO,EAAAC,EAAAC,cAACF,EAAAC,EAAM2C,SAAP,KACE5C,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC2C,EAAD,CACE/B,MAAO/B,KAAKyD,MAAMC,UAClBtB,eAAgBpC,KAAK2D,cACrBpB,YAAa,0BACftB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4C,EAAD,CACElC,KAAK,aACLpB,OAAQT,KAAKyD,MAAMC,UAAUP,gBAC/BlC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4C,EAAD,CACElC,KAAK,aACLpB,OAAQT,KAAKyD,MAAMC,UAAUN,gBAC/BnC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4C,EAAD,CACElC,KAAK,aACLpB,OAAQ4C,EAAgBrD,KAAKyD,MAAMC,aACrCzC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4C,EAAD,CACElC,KAAK,gBACLpB,OAAQgC,EAAazC,KAAKyD,MAAMC,qBAtCdzB,aCsBb+B,mLAlBX,OACE/C,EAAAC,EAAAC,cAAA,OAAKS,UAAU,iCAEbX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,WACbX,EAAAC,EAAAC,cAAC8C,EAAD,OAGFhD,EAAAC,EAAAC,cAAA,UAAQS,UAAU,uBAChBX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACbX,EAAAC,EAAAC,cAAA,QAAMS,UAAU,eAAhB,0EAZMK,aCOEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBhE,WACrBA,UAAUiE,cAAcC,MAAM/D,KAAK,SAAAgE,GACjCA,EAAaC","file":"static/js/main.002a1635.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, InputGroup, InputGroupText, InputGroupAddon, Input } from 'reactstrap';\r\n\r\nclass CaseResult extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleCopy = this.handleCopy.bind(this);\r\n  }\r\n\r\n  handleCopy(event){\r\n    this.copyToCLipboard(this.props.result);\r\n  }\r\n\r\n  copyToCLipboard(text) {\r\n    navigator.clipboard.writeText(text).then(function() {\r\n      /* clipboard successfully set */\r\n    }, function() {\r\n      /* clipboard write failed */\r\n      console.log(\"Copy to Clipboard Failed!\");\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <InputGroup>\r\n        <InputGroupAddon addonType=\"prepend\">\r\n        <Button color=\"primary\" onClick={this.handleCopy}\r\n         title=\"Copy text to clipboard\" >\r\n            Copy\r\n          </Button>\r\n          <InputGroupText className=\"text-light bg-dark\">\r\n            {this.props.case}\r\n          </InputGroupText>\r\n        </InputGroupAddon>          \r\n        <Input value={this.props.result} readOnly></Input>        \r\n      </InputGroup>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CaseResult;","import React, { Component } from 'react';\r\nimport { InputGroup, Input } from 'reactstrap';\r\n\r\nclass SourceText extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.props.onHandleChange(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <InputGroup>\r\n        <Input           \r\n          value={this.props.value}\r\n          placeholder={this.props.defaultText}\r\n          onChange={this.handleChange} >\r\n          </Input>\r\n      </InputGroup>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SourceText;","import React, { Component } from 'react';\r\nimport CaseResult from './CaseResult';\r\nimport SourceText from './SourceText';\r\n\r\nclass CaseConverter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      inputText: '',\r\n    };\r\n\r\n    this.handleConvert = this.handleConvert.bind(this);\r\n  }\r\n\r\n  handleConvert(text) {    \r\n    this.setState({inputText: text});\r\n  }  \r\n  \r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h3>Case Converter</h3>\r\n        <br />\r\n        <SourceText \r\n          value={this.state.inputText}          \r\n          onHandleChange={this.handleConvert}\r\n          defaultText={\"Text to be converted \"} />\r\n        <br />\r\n        <CaseResult\r\n          case=\"UPPER CASE\" \r\n          result={this.state.inputText.toUpperCase()} />\r\n        <br />\r\n        <CaseResult \r\n          case=\"lower case\" \r\n          result={this.state.inputText.toLowerCase()} />\r\n        <br />\r\n        <CaseResult \r\n          case=\"Start Case\" \r\n          result={initialCapsCase(this.state.inputText)} />\r\n        <br />\r\n        <CaseResult \r\n          case=\"Sentence case\" \r\n          result={sentenceCase(this.state.inputText)} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nfunction sentenceCase(text) {\r\n  let sentences = text.split(/([.?!])+/);\r\n  let newSentences = '';\r\n  sentences.forEach(element => {\r\n    let loc = element.length - element.trimStart().length;\r\n     newSentences += element.slice(0, loc) + element.slice(loc, loc+1).toUpperCase() + element.slice(loc+1).toLowerCase();\r\n  });\r\n  return newSentences;\r\n}\r\n\r\nfunction initialCapsCase(text) {\r\n  let words = text.split(/([\" \"])+/);\r\n  let newWords = '';\r\n  words.forEach(element => {\r\n    newWords += element.slice(0, 1).toUpperCase() + element.slice(1).toLowerCase();\r\n  });\r\n  return newWords;\r\n}\r\n\r\nexport default CaseConverter;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport CaseConverter from './CaseConverter';\r\n\r\nclass App extends Component {\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"App d-flex flex-column vh-100\"> \r\n\r\n        <div className=\"content\">\r\n          <CaseConverter></CaseConverter>\r\n        </div>\r\n\r\n        <footer className=\"footer mt-auto py-3\">\r\n          <div className=\"container\">\r\n            <span className=\"footer-text\">&copy; 2019 Robert Garza | Created using React and reactstrap.</span>\r\n          </div>\r\n        </footer>\r\n                  \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}